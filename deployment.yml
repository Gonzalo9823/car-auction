apiVersion: apps/v1
kind: Deployment # Tipo de servicio
metadata:
  name: car-auction-db # Nombre
spec:
  replicas: 1 # Cuantos contenedores corren
  selector:
    matchLabels:
      app: car-auction-db
  template:
    metadata:
      labels:
        app: car-auction-db
    spec:
      containers:
        - name: postgres
          image: postgres:14
          ports:
            - containerPort: 5432 # Puerto donde corre la aplicación
          env:
            - name: POSTGRES_DB
              value: car_auction
            - name: POSTGRES_USER
              value: car_auction
            - name: POSTGRES_PASSWORD
              value: car_auction
          volumeMounts:
            - mountPath: '/var/lib/postgresql/data' # De aquí para abajo para que la data de la DDBB sea persistente
              name: 'car-auction-pgdata'
      volumes:
        - hostPath:
            path: '/home/docker/pgdata'
          name: car-auction-pgdata

---
apiVersion: v1
kind: Service # Esto se hace para que se pueda entrar a la app car-auction-db desde "afuera"
metadata:
  name: car-auction-db
spec:
  type: NodePort
  selector:
    app: car-auction-db
  ports:
    - port: 5432 # Puerto que corre el servicio
      targetPort: 5432 # Puerto que corre la app

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-end
spec:
  replicas: 1
  selector:
    matchLabels:
      app: back-end
  template:
    metadata:
      labels:
        app: back-end
    spec:
      containers:
        - name: back-end
          imagePullPolicy: Never # Descargar de los contenedores locales
          command: ['./deploy']
          image: back-end/app:latest
          ports:
            - containerPort: 4000
          env:
            - name: DATABASE_URL
              value: postgres://car_auction:car_auction@car-auction-db:5432/car_auction
            - name: NODE_ENV
              value: production
            - name: IS_RUNNING_ON_KUBERNETES
              value: 'true'
            - name: OPENSEARCH_URL
              value: http://admin:admin@car-auction-open-search-node-1:9200

---
apiVersion: v1
kind: Service
metadata:
  name: back-end
spec:
  type: NodePort
  selector:
    app: back-end
  ports:
    - port: 4000
      targetPort: 4000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
spec:
  replicas: 1
  selector:
    matchLabels:
      app: front-end
  template:
    metadata:
      labels:
        app: front-end
    spec:
      containers:
        - name: front-end
          imagePullPolicy: Never # Descargar de los contenedores locales
          command: ['node', 'server.js']
          image: front-end/app:latest
          ports:
            - containerPort: 3000
          APP_NEXT_PUBLIC_API_PORT: [80]
          env:
            - name: API_URL
              value: http://back-end:4000/v1/

---
apiVersion: v1
kind: Service
metadata:
  name: front-end
spec:
  type: NodePort
  selector:
    app: front-end
  ports:
    - port: 3000
      targetPort: 3000

---
apiVersion: apps/v1
kind: Deployment # Tipo de servicio
metadata:
  name: car-auction-open-search-node-1 # Nombre
spec:
  replicas: 1 # Cuantos contenedores corren
  selector:
    matchLabels:
      app: car-auction-open-search-node-1
  template:
    metadata:
      labels:
        app: car-auction-open-search-node-1
    spec:
      initContainers:
        - name: set-permissions
          image: registry.hub.docker.com/library/busybox:latest
          command: ['sh', '-c', 'mkdir -p /usr/share/elasticsearch/data && chown 1000:1000 /usr/share/elasticsearch/data']
          volumeMounts:
            - name: car-auction-opensearch-node1-data
              mountPath: /usr/share/elasticsearch/data
      containers:
        - name: car-auction-open-search-node-1
          image: opensearchproject/opensearch:latest
          ports:
            - containerPort: 9200 # Puerto donde corre la aplicación
          env:
            - name: cluster.name
              value: opensearch-cluster
            - name: node.name
              value: car-auction-open-search-node-1
            - name: discovery.seed_hosts
              value: car-auction-open-search-node-1
            - name: cluster.initial_cluster_manager_nodes
              value: car-auction-open-search-node-1
            - name: OPENSEARCH_JAVA_OPTS
              value: -Xms512m -Xmx512m
            - name: DISABLE_SECURITY_PLUGIN
              value: 'true'
          volumeMounts:
            - mountPath: '/usr/share/opensearch/data' # De aquí para abajo para que la data de la DDBB sea persistente
              name: 'car-auction-opensearch-node1-data'
      volumes:
        - hostPath:
            path: '/home/docker/opensearch-node1-data'
          name: car-auction-opensearch-node1-data

---
apiVersion: v1
kind: Service
metadata:
  name: car-auction-open-search-node-1
spec:
  type: NodePort
  selector:
    app: car-auction-open-search-node-1
  ports:
    - port: 9200
      targetPort: 9200

---
apiVersion: v1
kind: Service # Esto se hace para que se pueda entrar a la app car-auction-db desde "afuera"
metadata:
  name: car-auction-db
spec:
  type: NodePort
  selector:
    app: car-auction-db
  ports:
    - port: 5432 # Puerto que corre el servicio
      targetPort: 5432 # Puerto que corre la app

---
apiVersion: networking.k8s.io/v1
kind: Ingress # Decide donde va cada request
metadata:
  name: nginx-ingress
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: front-end
                port:
                  number: 3000
